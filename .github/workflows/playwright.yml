name: Playwright Tests with Performance Reporting

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: |
        # Force remove the cache to ensure clean install
        rm -rf /home/runner/.cache/ms-playwright
        npx playwright install --with-deps chromium firefox webkit
        npx playwright install-deps

    - name: Run Playwright tests
      run: npm test
      env:
        CI: true

    - name: Set performance outputs
      if: always()
      run: |
        # Extract key metrics for use in other steps
        if [ -f "test-reports/test-results.json" ]; then
          PASSED=$(jq -r '.stats.expected // 0' test-reports/test-results.json)
          FAILED=$(jq -r '.stats.unexpected // 0' test-reports/test-results.json)
          TOTAL=$((PASSED + FAILED))
          DURATION=$(jq -r '.stats.duration // 0' test-reports/test-results.json)
          
          echo "tests-passed=$PASSED" >> $GITHUB_OUTPUT
          echo "tests-failed=$FAILED" >> $GITHUB_OUTPUT
          echo "tests-total=$TOTAL" >> $GITHUB_OUTPUT
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          
          # Calculate success rate (handle division safely)
          if [ $TOTAL -gt 0 ]; then
            SUCCESS_RATE=$((PASSED * 100 / TOTAL))
            echo "success-rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          else
            echo "success-rate=0" >> $GITHUB_OUTPUT
          fi
        fi
      id: performance-metrics

    - name: Generate GitHub Actions Summary
      if: always()
      run: |
        # Create detailed performance summary
        echo "# üé≠ Playwright Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test-reports/test-results.json" ]; then
          PASSED=$(jq -r '.stats.expected // 0' test-reports/test-results.json)
          FAILED=$(jq -r '.stats.unexpected // 0' test-reports/test-results.json)
          TOTAL=$((PASSED + FAILED))
          DURATION=$(jq -r '.stats.duration // 0' test-reports/test-results.json)
          # Convert duration to integer seconds (handle decimal values by truncating)
          DURATION_SEC=${DURATION%.*}
          DURATION_SEC=$((DURATION_SEC / 1000))
          
          echo "## üìä Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ Tests Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ùå Tests Failed | $FAILED |" >> $GITHUB_STEP_SUMMARY
          echo "| üìù Total Tests | $TOTAL |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚è±Ô∏è Duration | ${DURATION_SEC}s |" >> $GITHUB_STEP_SUMMARY
          
          if [ $TOTAL -gt 0 ]; then
            SUCCESS_RATE=$((PASSED * 100 / TOTAL))
            echo "| üìà Success Rate | ${SUCCESS_RATE}% |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add performance alerts if any
          if [ -f "performance.md" ]; then
            if grep -q "Test Failures" performance.md; then
              echo "## ‚ö†Ô∏è Test Failures" >> $GITHUB_STEP_SUMMARY
              echo "Some tests failed. Check the detailed report for more information." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "## üìã Available Reports" >> $GITHUB_STEP_SUMMARY
          echo "- üìÑ **Performance Report**: \`performance.md\`" >> $GITHUB_STEP_SUMMARY
          echo "- üåê **HTML Report**: \`test-reports/performance-report.html\`" >> $GITHUB_STEP_SUMMARY
          echo "- üìä **Trends**: \`performance-reports/trends.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- üè∑Ô∏è **Badge**: \`test-reports/badge.json\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All reports are available as artifacts in this workflow run." >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå No test results found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Display summary reports
      if: always()
      run: |
        echo "### üìã Available performance summary reports"
        if [ -d performance-reports ]; then
          echo "Found performance-reports directory with the following files:"
          ls -la performance-reports/ | head -20
          echo ""
          echo "### üìÑ Latest report samples:"
          for file in performance-reports/*.txt; do
            if [ -f "$file" ]; then
              echo "**$(basename $file)**"
              head -n 10 "$file" 2>/dev/null || true
              echo "..."
              echo ""
            fi
          done | head -50
        else
          echo "No performance-reports directory found"
        fi

    - name: Generate performance badge
      if: always()
      run: |
        # Extract test results for badge
        if [ -f "test-reports/test-results.json" ]; then
          PASSED=$(jq -r '.stats.expected // 0' test-reports/test-results.json)
          FAILED=$(jq -r '.stats.unexpected // 0' test-reports/test-results.json)
          TOTAL=$((PASSED + FAILED))
          
          # Generate badge JSON
          if [ $FAILED -eq 0 ]; then
            COLOR="brightgreen"
            MESSAGE="$PASSED/$TOTAL passing"
          elif [ $FAILED -lt 5 ]; then
            COLOR="yellow"
            MESSAGE="$PASSED/$TOTAL passing"
          else
            COLOR="red"
            MESSAGE="$PASSED/$TOTAL passing"
          fi
          
          # Create badge data
          echo "{\"schemaVersion\": 1, \"label\": \"tests\", \"message\": \"$MESSAGE\", \"color\": \"$COLOR\"}" > test-reports/badge.json
          echo "Generated badge: $MESSAGE ($COLOR)"
        fi

    - name: Comment on PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read test results
            const resultsPath = 'test-reports/test-results.json';
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              const passed = results.stats?.expected || 0;
              const failed = results.stats?.unexpected || 0;
              const total = passed + failed;
              const duration = ((results.stats?.duration || 0) / 1000).toFixed(2);
              
              const body = `## üöÄ Performance Test Results
              
              | Metric | Value |
              |--------|-------|
              | ‚úÖ Tests Passed | ${passed} |
              | ‚ùå Tests Failed | ${failed} |
              | üìù Total Tests | ${total} |
              | ‚è±Ô∏è Duration | ${duration}s |
              
              ${failed > 0 ? '‚ö†Ô∏è Some tests failed. Please check the detailed results.' : 'üéâ All tests passed!'}
              
              üìä [View detailed performance report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          } catch (error) {
            console.log('Could not post PR comment:', error.message);
          }

    - name: Commit performance reports
      if: always()
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add all performance-related files
        git add performance.md || true
        git add performance-reports/trends.json || true
        git add performance-reports/trend-report.md || true
        
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes to commit"
        else
          echo "Changes detected, committing performance reports..."
          
          # Pull latest changes to avoid conflicts
          git pull --rebase origin main || git pull --rebase origin master || true
          
          # Commit with simple message
          git commit -m "Update performance reports [skip ci] - $(date)"
          
          # Try to push, if it fails, pull and try again
          if ! git push; then
            echo "Push failed, attempting to resolve conflicts..."
            git pull --rebase origin main || git pull --rebase origin master || true
            git push
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-reports/
        retention-days: 30

    - name: Upload performance reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          performance.md
          test-reports/performance-report.html
          test-reports/badge.json
          performance-reports/
        retention-days: 30

    - name: Upload HTML performance report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: html-performance-report
        path: test-reports/performance-report.html
        retention-days: 30
        if-no-files-found: ignore

    - name: Upload performance trends
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-trends
        path: |
          performance-reports/trends.json
          performance-reports/trend-report.md
        retention-days: 90
        if-no-files-found: ignore

    - name: Upload screenshots (if any)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots
        path: screenshots/
        retention-days: 7
        if-no-files-found: ignore

    # Optional: Deploy HTML report to GitHub Pages (uncomment to enable)
    # - name: Setup Pages
    #   if: github.ref == 'refs/heads/main' && always()
    #   uses: actions/configure-pages@v4

    # - name: Deploy to GitHub Pages
    #   if: github.ref == 'refs/heads/main' && always()
    #   uses: actions/deploy-pages@v4
    #   with:
    #     artifact_name: html-performance-report
