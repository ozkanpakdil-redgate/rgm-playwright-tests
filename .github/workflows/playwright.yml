name: Playwright Tests with Performance Reporting

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write
  pull-requests: write
  issues: write
  pages: write
  id-token: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: |
        # Force remove the cache to ensure clean install
        rm -rf /home/runner/.cache/ms-playwright
        npx playwright install --with-deps chromium firefox webkit
        npx playwright install-deps

    - name: Run Playwright tests
      run: npm test
      env:
        CI: true

    - name: Set performance outputs
      if: always()
      run: |
        # Extract key metrics for use in other steps
        if [ -f "test-reports/test-results.json" ]; then
          PASSED=$(jq -r '.stats.expected // 0' test-reports/test-results.json)
          FAILED=$(jq -r '.stats.unexpected // 0' test-reports/test-results.json)
          SKIPPED=$(jq -r '.stats.skipped // 0' test-reports/test-results.json)
          TOTAL=$((PASSED + FAILED + SKIPPED))
          DURATION=$(jq -r '.stats.duration // 0' test-reports/test-results.json)
          
          echo "tests-passed=$PASSED" >> $GITHUB_OUTPUT
          echo "tests-failed=$FAILED" >> $GITHUB_OUTPUT
          echo "tests-skipped=$SKIPPED" >> $GITHUB_OUTPUT
          echo "tests-total=$TOTAL" >> $GITHUB_OUTPUT
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          
          # Calculate success rate using awk for floating point operations
          if [ $TOTAL -gt 0 ]; then
            SUCCESS_RATE=$(echo "$PASSED $TOTAL" | awk '{printf "%.1f", ($1 * 100) / $2}')
            echo "success-rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          else
            echo "success-rate=0.0" >> $GITHUB_OUTPUT
          fi
          
          # Convert duration to seconds using awk
          if [ -n "$DURATION" ] && [ "$DURATION" != "null" ] && [ "$DURATION" != "0" ]; then
            DURATION_SEC=$(echo "$DURATION" | awk '{printf "%.2f", $1/1000}')
            echo "duration-seconds=$DURATION_SEC" >> $GITHUB_OUTPUT
          else
            echo "duration-seconds=0.00" >> $GITHUB_OUTPUT
          fi
          
          echo "Performance metrics extracted:"
          echo "  Passed: $PASSED"
          echo "  Failed: $FAILED"
          echo "  Skipped: $SKIPPED"
          echo "  Total: $TOTAL"
          echo "  Duration: ${DURATION}ms (${DURATION_SEC:-0.00}s)"
          echo "  Success Rate: ${SUCCESS_RATE:-0.0}%"
        else
          echo "No test results file found, setting default values"
          echo "tests-passed=0" >> $GITHUB_OUTPUT
          echo "tests-failed=0" >> $GITHUB_OUTPUT
          echo "tests-skipped=0" >> $GITHUB_OUTPUT
          echo "tests-total=0" >> $GITHUB_OUTPUT
          echo "duration=0" >> $GITHUB_OUTPUT
          echo "duration-seconds=0.00" >> $GITHUB_OUTPUT
          echo "success-rate=0.0" >> $GITHUB_OUTPUT
        fi
      id: performance-metrics

    - name: Generate GitHub Actions Summary
      if: always()
      run: |
        # Create detailed performance summary with embedded reports
        echo "# üé≠ Playwright Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **Workflow Run**: [${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "üìÖ **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "üå≥ **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "üìù **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "üë§ **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test-reports/test-results.json" ]; then
          PASSED=$(jq -r '.stats.expected // 0' test-reports/test-results.json)
          FAILED=$(jq -r '.stats.unexpected // 0' test-reports/test-results.json)
          SKIPPED=$(jq -r '.stats.skipped // 0' test-reports/test-results.json)
          TOTAL=$((PASSED + FAILED + SKIPPED))
          DURATION=$(jq -r '.stats.duration // 0' test-reports/test-results.json)
          # Handle duration more carefully for floating point
          if [ -n "$DURATION" ] && [ "$DURATION" != "null" ] && [ "$DURATION" != "0" ]; then
            DURATION_SEC=$(echo "$DURATION" | awk '{printf "%.2f", $1/1000}')
          else
            DURATION_SEC="0.00"
          fi
          
          echo "## üìä Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ Tests Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ùå Tests Failed | $FAILED |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚è≠Ô∏è Tests Skipped | $SKIPPED |" >> $GITHUB_STEP_SUMMARY
          echo "| üìù Total Tests | $TOTAL |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚è±Ô∏è Duration | ${DURATION_SEC}s |" >> $GITHUB_STEP_SUMMARY
          
          if [ $TOTAL -gt 0 ]; then
            SUCCESS_RATE=$(echo "$PASSED $TOTAL" | awk '{printf "%.1f", ($1 * 100) / $2}')
            echo "| üìà Success Rate | ${SUCCESS_RATE}% |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status indicators
          if [ $FAILED -eq 0 ]; then
            echo "üéâ **Status**: All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Status**: $FAILED test(s) failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Embed Performance Report Content
          if [ -f "performance.md" ]; then
            echo "## üìÑ Performance Report Content" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>üìä Click to view detailed performance metrics</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```markdown' >> $GITHUB_STEP_SUMMARY
            cat performance.md >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Embed Performance Trends
          if [ -f "performance-reports/trend-report.md" ]; then
            echo "## üìà Performance Trends Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>üìä Click to view performance trends</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat performance-reports/trend-report.md >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Show summary of all performance alerts
          if [ -d "performance-reports" ]; then
            ALERT_COUNT=$(ls performance-reports/performance-alerts-*.txt 2>/dev/null | wc -l)
            if [ $ALERT_COUNT -gt 0 ]; then
              echo "## ‚ö†Ô∏è Performance Alerts ($ALERT_COUNT total)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Show latest alerts
              LATEST_ALERT=$(ls -t performance-reports/performance-alerts-*.txt 2>/dev/null | head -1)
              if [ -n "$LATEST_ALERT" ] && [ -f "$LATEST_ALERT" ]; then
                echo "<details>" >> $GITHUB_STEP_SUMMARY
                echo "<summary>‚ö†Ô∏è Latest Performance Alerts ($(basename $LATEST_ALERT))</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                head -30 "$LATEST_ALERT" >> $GITHUB_STEP_SUMMARY
                if [ $(wc -l < "$LATEST_ALERT") -gt 30 ]; then
                  echo "... ($(($( wc -l < "$LATEST_ALERT") - 30)) more alerts)" >> $GITHUB_STEP_SUMMARY
                fi
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "## ‚úÖ Performance Alerts" >> $GITHUB_STEP_SUMMARY
              echo "No performance alerts in this run! üéâ" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Enhanced Playwright HTML Report Summary with Direct Links
          if [ -f "test-reports/index.html" ]; then
            echo "## üé≠ Playwright Test Report Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Try to extract more information from HTML report
            if command -v grep >/dev/null 2>&1; then
              # Extract summary information
              TEST_COUNT=$(grep -o '"passed":[0-9]*' test-reports/index.html 2>/dev/null | grep -o '[0-9]*' | head -1 || echo "N/A")
              FAILED_COUNT=$(grep -o '"failed":[0-9]*' test-reports/index.html 2>/dev/null | grep -o '[0-9]*' | head -1 || echo "N/A")
              
              echo "### üìä Report Statistics" >> $GITHUB_STEP_SUMMARY
              echo "- **Total Passed**: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- **Total Failed**: $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- **Report Size**: $(ls -lh test-reports/index.html 2>/dev/null | awk '{print $5}' || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "### üîó Access Playwright Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Method | Link | Content |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|------|---------|" >> $GITHUB_STEP_SUMMARY
            echo "| üåê **Live Dashboard** | [üìä Test Dashboard](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/) | Interactive dashboard with navigation |" >> $GITHUB_STEP_SUMMARY
            echo "| üé≠ **Main Report** | [üìã Playwright Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/test-results.html) | Complete Playwright HTML report |" >> $GITHUB_STEP_SUMMARY
            echo "| üì∏ **Screenshots** | [üñºÔ∏è Visual Evidence](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/screenshots/) | Test failure screenshots |" >> $GITHUB_STEP_SUMMARY
            echo "| üß™ **Test Artifacts** | [üìÅ Detailed Traces](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/test-artifacts/) | Test execution artifacts |" >> $GITHUB_STEP_SUMMARY
            echo "| üìä **Performance Data** | [üìà Metrics](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/performance-metrics/) | Detailed performance JSON files |" >> $GITHUB_STEP_SUMMARY
            echo "| üìÅ **Download All** | [üíæ Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) | Download raw files |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üí° **Note**: Live links require GitHub Pages to be enabled at [Settings ‚Üí Pages](https://github.com/${{ github.repository }}/settings/pages)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Show Test Failures Details if any
          if [ $FAILED -gt 0 ]; then
            echo "## ‚ùå Test Failures Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>üîç Click to view detailed failure information</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract failure details from JSON
            echo "### Failed Tests:" >> $GITHUB_STEP_SUMMARY
            jq -r '.suites[]?.specs[]?.tests[]? | select(.results[]?.status == "failed") | "- **" + .title + "** (" + (.results[]?.workerIndex // "N/A" | tostring) + ")"' test-reports/test-results.json 2>/dev/null | head -10 >> $GITHUB_STEP_SUMMARY || echo "- Could not extract test details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show error messages
            echo "### Error Details:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r '.suites[]?.specs[]?.tests[]?.results[]? | select(.status == "failed") | (.error.message // "No error message") + "\n---"' test-reports/test-results.json 2>/dev/null | head -15 >> $GITHUB_STEP_SUMMARY || echo "Could not extract error details" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Enhanced Badge Status
          if [ -f "test-reports/badge.json" ]; then
            BADGE_MESSAGE=$(jq -r '.message' test-reports/badge.json 2>/dev/null || echo "N/A")
            BADGE_COLOR=$(jq -r '.color' test-reports/badge.json 2>/dev/null || echo "grey")
            echo "## üè∑Ô∏è Status Badge" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "![Test Status](https://img.shields.io/badge/tests-$(echo $BADGE_MESSAGE | sed 's/ /%20/g')-$BADGE_COLOR)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Artifacts section with comprehensive coverage
          echo "## üì¶ Available Reports & Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üåê Live Reports" >> $GITHUB_STEP_SUMMARY
          echo "| Report Type | Live Link |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| üé≠ **Playwright Report** | [üìä View Live Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìÅ Test Results & Reports" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Description | Content Preview |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------------|-----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ [complete-test-results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) | Complete test execution data, traces, and artifacts | " >> $GITHUB_STEP_SUMMARY
          
          # Add test-results directory info
          if [ -d "test-results" ]; then
            TEST_ARTIFACTS_COUNT=$(find test-results -type f 2>/dev/null | wc -l)
            echo "$(echo $TEST_ARTIFACTS_COUNT) files including traces and test artifacts |" >> $GITHUB_STEP_SUMMARY
          else
            echo "Test artifacts and execution traces |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| üìä [performance-metrics](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) | Detailed performance metrics and measurements | " >> $GITHUB_STEP_SUMMARY
          
          # Add performance-metrics info
          if [ -d "performance-metrics" ]; then
            PERF_METRICS_COUNT=$(ls performance-metrics/*.json 2>/dev/null | wc -l)
            echo "$(echo $PERF_METRICS_COUNT) JSON files with detailed metrics |" >> $GITHUB_STEP_SUMMARY
          else
            echo "Performance measurement data |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| üìÑ [performance-reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) | Performance analysis reports and trends | Markdown reports, HTML files, trends |" >> $GITHUB_STEP_SUMMARY
          
          # Add performance-snapshots if exists
          if [ -d "performance-snapshots" ]; then
            SNAPSHOT_COUNT=$(ls performance-snapshots 2>/dev/null | wc -l)
            echo "| üì∏ [performance-snapshots](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) | Performance monitoring snapshots | $(echo $SNAPSHOT_COUNT) snapshot files |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| üìà [performance-trends](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) | Historical performance trend data | JSON data and trend analysis |" >> $GITHUB_STEP_SUMMARY
          
          # Add screenshots info with count
          if [ -d "screenshots" ]; then
            SCREENSHOT_COUNT=$(ls screenshots 2>/dev/null | wc -l)
            if [ $SCREENSHOT_COUNT -gt 0 ]; then
              echo "| üì∏ [screenshots-and-traces](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) | Test failure screenshots and traces | $(echo $SCREENSHOT_COUNT) screenshots + test traces |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üéØ Quick Access Links" >> $GITHUB_STEP_SUMMARY
          echo "| Action | Direct Link |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| üìÅ **Download All** | [üì• View All Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) |" >> $GITHUB_STEP_SUMMARY
          echo "| üåê **Live Report** | [üé≠ Playwright Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/) |" >> $GITHUB_STEP_SUMMARY
          echo "| üìä **This Summary** | [üìã Current Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Content Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Directory | File Count | Size | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|------|-------------|" >> $GITHUB_STEP_SUMMARY
          
          # Enhanced directory analysis
          for dir in test-results test-reports performance-metrics performance-reports performance-snapshots screenshots; do
            if [ -d "$dir" ]; then
              FILE_COUNT=$(find "$dir" -type f 2>/dev/null | wc -l)
              DIR_SIZE=$(du -sh "$dir" 2>/dev/null | cut -f1 || echo "N/A")
              case $dir in
                "test-results") DESC="Playwright test artifacts and traces" ;;
                "test-reports") DESC="Test execution reports and JSON data" ;;
                "performance-metrics") DESC="Detailed performance measurements" ;;
                "performance-reports") DESC="Performance analysis and trends" ;;
                "performance-snapshots") DESC="Performance monitoring snapshots" ;;
                "screenshots") DESC="Test failure screenshots" ;;
              esac
              echo "| üìÅ $dir | $FILE_COUNT files | $DIR_SIZE | $DESC |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üí° **Tip**: Click any artifact link above to download and explore the detailed reports!" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "‚ùå **No test results found**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The test execution may have failed or results file was not generated." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Display comprehensive reports
      if: always()
      run: |
        echo "üé≠ =============================================="
        echo "    COMPREHENSIVE PLAYWRIGHT TEST REPORTS"
        echo "    Run #${{ github.run_number }} - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "    Branch: ${{ github.ref_name }} | Commit: ${{ github.sha }}"
        echo "=============================================="
        echo ""
        
        # Show Test Results Summary with enhanced details
        if [ -f "test-reports/test-results.json" ]; then
          echo "üß™ DETAILED TEST RESULTS SUMMARY:"
          echo "================================="
          
          PASSED=$(jq -r '.stats.expected // 0' test-reports/test-results.json)
          FAILED=$(jq -r '.stats.unexpected // 0' test-reports/test-results.json)
          SKIPPED=$(jq -r '.stats.skipped // 0' test-reports/test-results.json)
          TOTAL=$((PASSED + FAILED + SKIPPED))
          DURATION=$(jq -r '.stats.duration // 0' test-reports/test-results.json)
          DURATION_SEC=$(echo "$DURATION" | awk '{printf "%.2f", $1/1000}')
          
          echo "üìä OVERALL STATISTICS:"
          echo "  ‚úÖ Passed: $PASSED"
          echo "  ‚ùå Failed: $FAILED"
          echo "  ‚è≠Ô∏è Skipped: $SKIPPED"
          echo "  üìù Total: $TOTAL"
          echo "  ‚è±Ô∏è Duration: ${DURATION_SEC}s"
          
          if [ $TOTAL -gt 0 ]; then
            SUCCESS_RATE=$(echo "$PASSED $TOTAL" | awk '{printf "%.1f", ($1 * 100) / $2}')
            echo "  üìà Success Rate: ${SUCCESS_RATE}%"
          fi
          echo ""
          
          echo "üìã TEST SUITES BREAKDOWN:"
          jq -r '.suites[] | "  üìÅ " + .title + " (" + (.specs | length | tostring) + " specs)"' test-reports/test-results.json 2>/dev/null || echo "  Could not parse test suites"
          echo ""
          
          if [ $FAILED -gt 0 ]; then
            echo "‚ùå FAILED TESTS DETAILS:"
            jq -r '.suites[]?.specs[]?.tests[]? | select(.results[]?.status == "failed") | "  üî¥ " + .title + " (" + (.results[]?.workerIndex // "N/A" | tostring) + ")"' test-reports/test-results.json 2>/dev/null || echo "  Could not parse failed tests"
            echo ""
            
            echo "üö® ERROR MESSAGES:"
            jq -r '.suites[]?.specs[]?.tests[]?.results[]? | select(.status == "failed") | "  ‚ö†Ô∏è " + (.error.message // "No error message") + "\n  ---"' test-reports/test-results.json 2>/dev/null | head -20 || echo "  Could not parse error messages"
            echo ""
          fi
        else
          echo "‚ùå NO TEST RESULTS FOUND"
          echo "========================="
          echo "The test execution may have failed or results were not generated properly."
          echo ""
        fi
        
        # Show Performance Report with better formatting
        if [ -f "performance.md" ]; then
          echo "üìÑ PERFORMANCE REPORT CONTENT:"
          echo "=============================="
          cat performance.md
          echo ""
          echo "üìè Report Size: $(ls -lh performance.md 2>/dev/null | awk '{print $5}' || echo 'N/A')"
          echo ""
        else
          echo "üìÑ PERFORMANCE REPORT: Not Found"
          echo ""
        fi
        
        # Show Trend Report with enhanced information
        if [ -f "performance-reports/trend-report.md" ]; then
          echo "üìà PERFORMANCE TRENDS ANALYSIS:"
          echo "==============================="
          cat performance-reports/trend-report.md
          echo ""
          echo "üìè Trend Report Size: $(ls -lh performance-reports/trend-report.md 2>/dev/null | awk '{print $5}' || echo 'N/A')"
          
          # Show trends data summary
          if [ -f "performance-reports/trends.json" ]; then
            echo "üìä Trends Data Summary:"
            TREND_COUNT=$(jq length performance-reports/trends.json 2>/dev/null || echo "0")
            echo "  üìù Total data points: $TREND_COUNT"
            echo "  üìè Trends file size: $(ls -lh performance-reports/trends.json 2>/dev/null | awk '{print $5}' || echo 'N/A')"
          fi
          echo ""
        else
          echo "üìà PERFORMANCE TRENDS: Not Found"
          echo ""
        fi
        
        # Show Performance Alerts with comprehensive analysis
        if [ -d "performance-reports" ]; then
          echo "‚ö†Ô∏è PERFORMANCE ALERTS ANALYSIS:"
          echo "==============================="
          
          ALERT_FILES=($(ls -t performance-reports/performance-alerts-*.txt 2>/dev/null || true))
          ALERT_COUNT=${#ALERT_FILES[@]}
          
          if [ $ALERT_COUNT -gt 0 ]; then
            echo "üìä Alert Summary:"
            echo "  üö® Total alert files: $ALERT_COUNT"
            echo "  üìÖ Latest: $(basename ${ALERT_FILES[0]} 2>/dev/null || echo 'N/A')"
            echo "  üìÖ Oldest: $(basename ${ALERT_FILES[-1]} 2>/dev/null || echo 'N/A')"
            echo ""
            
            echo "üî¥ LATEST ALERTS CONTENT:"
            echo "-------------------------"
            if [ -f "${ALERT_FILES[0]}" ]; then
              head -50 "${ALERT_FILES[0]}"
              TOTAL_LINES=$(wc -l < "${ALERT_FILES[0]}")
              if [ $TOTAL_LINES -gt 50 ]; then
                echo "... ($(($TOTAL_LINES - 50)) more alerts not shown)"
              fi
            fi
            echo ""
            
            # Show alert statistics
            echo "üìä ALERT STATISTICS:"
            if [ -f "${ALERT_FILES[0]}" ]; then
              SLOW_COUNT=$(grep -c "SLOW PERFORMANCE ALERT" "${ALERT_FILES[0]}" 2>/dev/null || echo "0")
              echo "  ‚ö†Ô∏è Slow performance alerts: $SLOW_COUNT"
            fi
            echo ""
            
          else
            echo "‚úÖ No performance alerts found - Great job! üéâ"
            echo ""
          fi
        else
          echo "‚ö†Ô∏è PERFORMANCE ALERTS: Directory not found"
          echo ""
        fi
        
        # Show Playwright HTML Report Info with enhanced details
        if [ -f "test-reports/index.html" ]; then
          echo "üåê PLAYWRIGHT HTML REPORT ANALYSIS:"
          echo "===================================="
          echo "üìä Report Information:"
          echo "  üìÑ Main file: test-reports/index.html"
          echo "  üìè Report size: $(ls -lh test-reports/index.html 2>/dev/null | awk '{print $5}' || echo 'N/A')"
          
          if [ -d "test-reports/data" ]; then
            DATA_FILES=$(ls test-reports/data 2>/dev/null | wc -l)
            echo "  üìÅ Data files: $DATA_FILES files"
            echo "  üìÅ Data folder size: $(du -sh test-reports/data 2>/dev/null | cut -f1 || echo 'N/A')"
          fi
          
          # Try to extract browser-specific information
          echo ""
          echo "üåê BROWSER TEST ANALYSIS:"
          if command -v grep >/dev/null 2>&1; then
            for browser in chromium firefox webkit; do
              if grep -q "$browser" test-reports/index.html 2>/dev/null; then
                echo "  ‚úÖ $browser: Tests included"
              else
                echo "  ‚ùå $browser: No tests found"
              fi
            done
          fi
          echo ""
        else
          echo "üåê PLAYWRIGHT HTML REPORT: Not Found"
          echo ""
        fi
        
        # Show Badge Information
        if [ -f "test-reports/badge.json" ]; then
          echo "üè∑Ô∏è STATUS BADGE INFORMATION:"
          echo "============================"
          echo "üìä Badge Data:"
          cat test-reports/badge.json | jq . 2>/dev/null || cat test-reports/badge.json
          echo ""
        else
          echo "üè∑Ô∏è STATUS BADGE: Not Found"
          echo ""
        fi
        
        # Show Artifacts and File Summary with comprehensive coverage
        echo "üì¶ ARTIFACTS AND FILES SUMMARY:"
        echo "==============================="
        echo "üìä Generated Files and Directories:"
        
        echo "  üìÑ Performance reports:"
        [ -f "performance.md" ] && echo "    ‚úÖ performance.md ($(ls -lh performance.md 2>/dev/null | awk '{print $5}'))" || echo "    ‚ùå performance.md"
        [ -f "test-reports/performance-report.html" ] && echo "    ‚úÖ performance-report.html ($(ls -lh test-reports/performance-report.html 2>/dev/null | awk '{print $5}'))" || echo "    ‚ùå performance-report.html"
        [ -f "test-reports/badge.json" ] && echo "    ‚úÖ badge.json ($(ls -lh test-reports/badge.json 2>/dev/null | awk '{print $5}'))" || echo "    ‚ùå badge.json"
        
        echo "  üìà Trend reports:"
        [ -f "performance-reports/trends.json" ] && echo "    ‚úÖ trends.json ($(ls -lh performance-reports/trends.json 2>/dev/null | awk '{print $5}'))" || echo "    ‚ùå trends.json"
        [ -f "performance-reports/trend-report.md" ] && echo "    ‚úÖ trend-report.md ($(ls -lh performance-reports/trend-report.md 2>/dev/null | awk '{print $5}'))" || echo "    ‚ùå trend-report.md"
        
        echo "  üìä Performance metrics:"
        if [ -d "performance-metrics" ]; then
          METRICS_COUNT=$(ls performance-metrics/*.json 2>/dev/null | wc -l)
          echo "    ‚úÖ performance-metrics/ ($METRICS_COUNT JSON files, $(du -sh performance-metrics 2>/dev/null | cut -f1 || echo 'N/A'))"
          echo "    üìã Latest metrics files:"
          ls -t performance-metrics/*.json 2>/dev/null | head -3 | while read file; do
            echo "      üìÑ $(basename "$file") ($(ls -lh "$file" 2>/dev/null | awk '{print $5}'))"
          done
        else
          echo "    ‚ùå performance-metrics/ directory not found"
        fi
        
        echo "  üß™ Test results:"
        [ -f "test-reports/test-results.json" ] && echo "    ‚úÖ test-results.json ($(ls -lh test-reports/test-results.json 2>/dev/null | awk '{print $5}'))" || echo "    ‚ùå test-results.json"
        [ -f "test-reports/index.html" ] && echo "    ‚úÖ index.html ($(ls -lh test-reports/index.html 2>/dev/null | awk '{print $5}'))" || echo "    ‚ùå index.html"
        
        if [ -d "test-results" ]; then
          PLAYWRIGHT_ARTIFACTS=$(find test-results -name ".playwright-artifacts-*" -type d 2>/dev/null | wc -l)
          TOTAL_TEST_FILES=$(find test-results -type f 2>/dev/null | wc -l)
          echo "    ‚úÖ test-results/ ($PLAYWRIGHT_ARTIFACTS artifact directories, $TOTAL_TEST_FILES total files, $(du -sh test-results 2>/dev/null | cut -f1 || echo 'N/A'))"
          echo "    üìã Test artifacts breakdown:"
          find test-results -maxdepth 1 -type d -name ".playwright-artifacts-*" 2>/dev/null | head -5 | while read dir; do
            FILES_IN_DIR=$(find "$dir" -type f 2>/dev/null | wc -l)
            echo "      üìÅ $(basename "$dir") ($FILES_IN_DIR files)"
          done
        else
          echo "    ‚ùå test-results/ directory not found"
        fi
        
        echo "  üì∏ Screenshots and traces:"
        if [ -d "screenshots" ]; then
          SCREENSHOT_COUNT=$(ls screenshots 2>/dev/null | wc -l)
          echo "    ‚úÖ screenshots/ ($SCREENSHOT_COUNT files, $(du -sh screenshots 2>/dev/null | cut -f1 || echo 'N/A'))"
          if [ $SCREENSHOT_COUNT -gt 0 ]; then
            echo "    üìã Recent screenshots:"
            ls -t screenshots/*.png screenshots/*.jpg 2>/dev/null | head -3 | while read file; do
              echo "      üì∑ $(basename "$file") ($(ls -lh "$file" 2>/dev/null | awk '{print $5}'))"
            done
          fi
        else
          echo "    ‚ùå screenshots/ directory not found"
        fi
        
        echo "  üìä Performance snapshots:"
        if [ -d "performance-snapshots" ]; then
          SNAPSHOT_COUNT=$(ls performance-snapshots 2>/dev/null | wc -l)
          echo "    ‚úÖ performance-snapshots/ ($SNAPSHOT_COUNT files, $(du -sh performance-snapshots 2>/dev/null | cut -f1 || echo 'N/A'))"
        else
          echo "    ‚ùå performance-snapshots/ directory not found"
        fi
        
        echo ""
        echo "üîó COMPREHENSIVE ARTIFACT ACCESS:"
        echo "  üìÅ All artifacts: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
        echo "  üé≠ Live Playwright Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/"
        echo "  üìä GitHub Actions Summary: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "üìã AVAILABLE ARTIFACT DOWNLOADS:"
        echo "  üß™ complete-test-results - Full test execution data and traces"
        echo "  üìä performance-metrics - Detailed performance measurements (JSON files)"
        echo "  üìÑ performance-reports - Analysis reports and trends"
        echo "  üìà performance-trends - Historical trend data"
        echo "  üì∏ screenshots-and-traces - Visual evidence and test traces"
        if [ -d "performance-snapshots" ]; then
          echo "  üì∏ performance-snapshots - Performance monitoring snapshots"
        fi
        echo ""
        echo "=============================================="
        echo "    END OF COMPREHENSIVE REPORT"
        echo "=============================================="

    - name: Generate performance badge
      if: always()
      run: |
        # Extract test results for badge
        if [ -f "test-reports/test-results.json" ]; then
          PASSED=$(jq -r '.stats.expected // 0' test-reports/test-results.json)
          FAILED=$(jq -r '.stats.unexpected // 0' test-reports/test-results.json)
          TOTAL=$((PASSED + FAILED))
          
          # Generate badge JSON
          if [ $FAILED -eq 0 ]; then
            COLOR="brightgreen"
            MESSAGE="$PASSED/$TOTAL passing"
          elif [ $FAILED -lt 5 ]; then
            COLOR="yellow"
            MESSAGE="$PASSED/$TOTAL passing"
          else
            COLOR="red"
            MESSAGE="$PASSED/$TOTAL passing"
          fi
          
          # Create badge data
          echo "{\"schemaVersion\": 1, \"label\": \"tests\", \"message\": \"$MESSAGE\", \"color\": \"$COLOR\"}" > test-reports/badge.json
          echo "Generated badge: $MESSAGE ($COLOR)"
        fi

    - name: Comment on PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read test results
            const resultsPath = 'test-reports/test-results.json';
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              const passed = results.stats?.expected || 0;
              const failed = results.stats?.unexpected || 0;
              const total = passed + failed;
              const duration = ((results.stats?.duration || 0) / 1000).toFixed(2);
              
              const body = `## üöÄ Performance Test Results
              
              | Metric | Value |
              |--------|-------|
              | ‚úÖ Tests Passed | ${passed} |
              | ‚ùå Tests Failed | ${failed} |
              | üìù Total Tests | ${total} |
              | ‚è±Ô∏è Duration | ${duration}s |
              
              ${failed > 0 ? '‚ö†Ô∏è Some tests failed. Please check the detailed results.' : 'üéâ All tests passed!'}
              
              üìä [View detailed performance report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          } catch (error) {
            console.log('Could not post PR comment:', error.message);
          }

    - name: Commit performance reports
      if: always()
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add all performance-related files
        git add performance.md || true
        git add performance-reports/trends.json || true
        git add performance-reports/trend-report.md || true
        
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes to commit"
        else
          echo "Changes detected, committing performance reports..."
          
          # Pull latest changes to avoid conflicts
          git pull --rebase origin main || git pull --rebase origin master || true
          
          # Commit with simple message
          git commit -m "Update performance reports [skip ci] - $(date)"
          
          # Try to push, if it fails, pull and try again
          if ! git push; then
            echo "Push failed, attempting to resolve conflicts..."
            git pull --rebase origin main || git pull --rebase origin master || true
            git push
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-reports/
        retention-days: 30

    - name: Upload all test results and artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: complete-test-results
        path: |
          test-results/
          test-reports/
        retention-days: 30

    - name: Upload performance metrics
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-metrics
        path: performance-metrics/
        retention-days: 30
        if-no-files-found: ignore

    - name: Upload performance reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          performance.md
          test-reports/performance-report.html
          test-reports/badge.json
          performance-reports/
        retention-days: 30

    - name: Upload performance snapshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-snapshots
        path: performance-snapshots/
        retention-days: 15
        if-no-files-found: ignore

    - name: Upload HTML performance report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: html-performance-report
        path: test-reports/performance-report.html
        retention-days: 30
        if-no-files-found: ignore

    - name: Upload performance trends
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-trends
        path: |
          performance-reports/trends.json
          performance-reports/trend-report.md
        retention-days: 90
        if-no-files-found: ignore

    - name: Upload screenshots with enhanced organization
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-and-traces
        path: |
          screenshots/
          test-results/
        retention-days: 7
        if-no-files-found: ignore

    - name: Prepare Playwright report for GitHub Pages
      if: github.ref == 'refs/heads/main' && always()
      run: |
        # Create a directory structure for GitHub Pages
        mkdir -p playwright-report
        
        # Copy the Playwright HTML report to the pages directory
        if [ -f "test-reports/index.html" ]; then
          echo "üìã Preparing Playwright report for GitHub Pages deployment..."
          cp -r test-reports/* playwright-report/ 2>/dev/null || true
          
          # Also copy screenshots if they exist
          if [ -d "screenshots" ] && [ "$(ls -A screenshots 2>/dev/null)" ]; then
            echo "üì∏ Including screenshots in deployment..."
            mkdir -p playwright-report/screenshots
            cp -r screenshots/* playwright-report/screenshots/ 2>/dev/null || true
          fi
          
          # Copy test-results artifacts for browsing
          if [ -d "test-results" ]; then
            echo "üß™ Including test artifacts in deployment..."
            mkdir -p playwright-report/test-artifacts
            cp -r test-results/* playwright-report/test-artifacts/ 2>/dev/null || true
          fi
          
          # Copy performance metrics for easy access
          if [ -d "performance-metrics" ]; then
            echo "üìä Including performance metrics in deployment..."
            mkdir -p playwright-report/performance-metrics
            cp -r performance-metrics/* playwright-report/performance-metrics/ 2>/dev/null || true
          fi
          
          # Create an enhanced index page with navigation
          cat > playwright-report/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Playwright Test Dashboard</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                    margin: 0; padding: 20px; 
                    background: #f5f5f5;
                }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { 
                    background: white; 
                    padding: 30px; 
                    border-radius: 8px; 
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    margin-bottom: 20px;
                    text-align: center;
                }
                .nav-grid { 
                    display: grid; 
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
                    gap: 20px; 
                    margin-top: 20px;
                }
                .nav-card { 
                    background: white; 
                    padding: 25px; 
                    border-radius: 8px; 
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    text-decoration: none; 
                    color: inherit;
                    transition: transform 0.2s;
                }
                .nav-card:hover { transform: translateY(-2px); }
                .nav-card h3 { margin: 0 0 10px 0; color: #333; }
                .nav-card p { margin: 0; color: #666; font-size: 14px; }
                .emoji { font-size: 24px; margin-bottom: 10px; display: block; }
                .status { 
                    display: inline-block; 
                    padding: 4px 12px; 
                    border-radius: 12px; 
                    font-size: 12px; 
                    font-weight: bold;
                    margin-top: 10px;
                }
                .status.available { background: #e8f5e8; color: #2d5016; }
                .status.main-report { background: #e3f2fd; color: #1565c0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üé≠ Playwright Test Dashboard</h1>
                    <p>Comprehensive test results, performance metrics, and visual evidence</p>
                </div>
                
                <div class="nav-grid">
                    <a href="./test-results.html" class="nav-card">
                        <span class="emoji">üé≠</span>
                        <h3>Main Test Report</h3>
                        <p>Interactive Playwright HTML report with test results, timelines, and traces</p>
                        <span class="status main-report">PRIMARY REPORT</span>
                    </a>
                    
                    <a href="./screenshots/" class="nav-card">
                        <span class="emoji">üì∏</span>
                        <h3>Screenshots</h3>
                        <p>Visual evidence from test failures and important test steps</p>
                        <span class="status available">AVAILABLE</span>
                    </a>
                    
                    <a href="./test-artifacts/" class="nav-card">
                        <span class="emoji">üß™</span>
                        <h3>Test Artifacts</h3>
                        <p>Detailed test execution artifacts, traces, and debugging information</p>
                        <span class="status available">AVAILABLE</span>
                    </a>
                    
                    <a href="./performance-metrics/" class="nav-card">
                        <span class="emoji">üìä</span>
                        <h3>Performance Metrics</h3>
                        <p>Detailed performance measurements and monitoring data (JSON files)</p>
                        <span class="status available">AVAILABLE</span>
                    </a>
                </div>
                
                <div style="text-align: center; margin-top: 40px; color: #666;">
                    <p>üìã Generated from GitHub Actions workflow</p>
                    <p><a href="https://github.com/YOUR_REPO/actions" style="color: #1565c0;">View workflow runs</a></p>
                </div>
            </div>
            
            <script>
                // Auto-redirect to main report after 3 seconds if no interaction
                setTimeout(() => {
                    if (!document.querySelector(':hover')) {
                        window.location.href = './test-results.html';
                    }
                }, 3000);
            </script>
        </body>
        </html>
        EOF
          
          # Rename the original Playwright report
          if [ -f "playwright-report/index.html.orig" ]; then
            mv "playwright-report/index.html.orig" "playwright-report/test-results.html"
          else
            # Find the main Playwright HTML file and rename it
            for file in playwright-report/*.html; do
              if [ "$file" != "playwright-report/index.html" ] && [ -f "$file" ]; then
                cp "$file" "playwright-report/test-results.html"
                break
              fi
            done
          fi
          
          echo "‚úÖ Enhanced Playwright dashboard prepared for GitHub Pages"
          echo "üìä Dashboard will be available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/"
          echo "üé≠ Main report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/test-results.html"
          echo "üì∏ Screenshots: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/screenshots/"
        else
          echo "‚ùå No Playwright report found to deploy"
        fi

    - name: Setup Pages
      if: github.ref == 'refs/heads/main' && always()
      uses: actions/configure-pages@v4
      continue-on-error: true
      id: pages-setup

    - name: Upload Pages artifact
      if: github.ref == 'refs/heads/main' && always() && steps.pages-setup.outcome == 'success'
      uses: actions/upload-pages-artifact@v3
      with:
        path: playwright-report/
      continue-on-error: true
      id: pages-upload

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && always() && steps.pages-upload.outcome == 'success'
      uses: actions/deploy-pages@v4
      id: deployment
      with:
        artifact_name: github-pages
      continue-on-error: true

    - name: Pages deployment status
      if: github.ref == 'refs/heads/main' && always()
      run: |
        if [ "${{ steps.deployment.outcome }}" == "success" ]; then
          echo "‚úÖ GitHub Pages deployment successful!"
          echo "üåê Live report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/playwright-report/"
        else
          echo "‚ö†Ô∏è GitHub Pages deployment failed or skipped"
          echo "üí° To enable GitHub Pages:"
          echo "   1. Go to: https://github.com/${{ github.repository }}/settings/pages"
          echo "   2. Set Source to 'GitHub Actions'"
          echo "   3. Save settings"
          echo ""
          echo "üìä Alternative: All reports are still available as artifacts!"
        fi
